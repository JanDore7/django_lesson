1) pip install django==4.2.1  Установим фраемворк

* django-admin - выведет в консоль все доступные команды

2) django-admin startproject [название проекта]
3) python3 manage.py runserver - запуск проекта опционально можно добавть порт
	python3 manage.py runserver [port] 
	
	
4) python3 manage.py startapp [название приложения]

5) Регистрируем приложение в settings.py [папка/файл/название класса]
	'women.apps.WomenConfig'
	
6) Определение функций def index(request): где request это ссылка на класс 
	HttpRequest который содержит в себе всю информацию о запросе. (сессии,
	куки и т.д) Через эту переменную, будет доступна вся информация о
	текущем запросе.


7) path('', include('women.urls')) используя функцию include все маршруты
	которые относятся к приложению women выносятя в отдельный файл.
	Кроме того можно добавить суфикс, например
	path('women', include('women.urls')) и данный суфикс добавиться ко
	всем маршрутам имеющим отношение к women.urls.py
 
 8) Конверторы и их типы:
	    int: Используется для сопоставления целых чисел в URL. Например,
	    path('articles/<int:article_id>/', views.article_detail).
	    

    	    str: Сопоставляет любую строку в URL. Например, path('products/
    	    <str:product_slug>/', views.product_detail).
    	    

            slug: Похож на str, но обычно используется для сопоставления
            строк, представляющих "слаги" или человеко-читаемые URL-адреса.
            
            Например,path('articles<slug:article_slug>/',
            views.article_detail).

            uuid: Используется для сопоставления UUID (Уникальных
            идентификаторов) в URL. Например, path('items/<uuid:item_id>/',
            views.item_detail).

            path: По умолчанию используется для сопоставления строк без
            прямого слеша ("/"). Например, path('pages/<path:page_path>/',
            views.page_detail).

            date: Сопоставляет дату в URL. Например, path('events/
            <date:event_date>/', views.event_detail).

            slugify: Похож на slug, но генерирует слаг автоматически на 
            основе переданной строки.

            custom converters: Вы также можете создать собственные
            пользовательские конвертеры, определив класс конвертера и его
            методы to_python и to_url. Это полезно, если у вас есть
            нестандартные типы данных, которые вы хотите использовать в URL.

9) В urls важно располагать пути в строгом порядке, поскольку джанго ищет маршруты с верху вниз.


10) Функция re_path позволяет использовать регулярные выражения.

11) register_converter(converters.MyCustomConverter, 'year4') где 'year4',
	произвольное имя которое удет использоваться при определении адресов
	url. 
	
12) При переключении проекта из режима разработки нербходимо заполнить
 	разршенные хосты ALLOWED_HOSTS = ['127.0.0.1']
 	
13) Обработчики и не только https://docs.djangoproject.com/en/4.2/ref/urls/

14) 301 - страница перемещена на другой постоянный url; 302 - перемещена
	времено на другой url.
 
 	По умолчанию функция redirect() перемещает страницу с кодом 302,
 	если добавить аргумент permanent=True, то код смениться на 301,
 	функция первым аргументом может принимать как url например "/", 
 	так и название другой функции привязанной к url 
 	redirect(index, permanent=True), кроме это можно прописать имя
 	маршрута заданное в файле urls что на самом деле является самым
 	предпочтительным вариантом,так же обязательное условие данной
 	функции это вызов ее через return.

	Если у маршрута есть дополнительный параметр, например slug то 
	необходимо и в функцию добавлять параметр например 
	redirect('cats', 'qq')
 	
 15) Функция reverse в Django используется для построения URL-адреса на
 	основе имени URL-шаблона и аргументов (параметров) для этого шаблона.
 	Это позволяет вам создавать URL-адреса динамически вместо их
 	хардкодного указания в вашем коде.
 	
 	В вашем конкретном примере, reverse('cats', args=('music',))
 	означает следующее:
 	
 	'cats' - это имя URL-шаблона, который вы хотите использовать для
 	построения URL-адреса. Ваш URL-шаблон с именем 'cats'
 	 
 	должен быть определен в файлах маршрутов вашего Django-приложения.
 	
 	args=('music',) - это кортеж аргументов, которые вы передаете в
 	URL-шаблон. В данном случае, вы передаете один аргумент 'music'
 	в URL-шаблон с именем 'cats'.
 	
 	Функция reverse найдет URL-шаблон с именем 'cats' и подставит
 	значение 'music' в соответствующее место в URL-шаблоне, 
 	заменив, например, <slug:cat_slug>. Затем она вернет полный 
 	URL-адрес.

16) 301 и 302 при помощи классов. HttpResponseRedirect - 302;
	HttpResponsePtrmanentRedirect - 301
	Пример: HttpResponseRedirect(uri)
 	

17) Папку templates создаем в корне программы и там уже создать подкаталог
	программы  render_to_string('путь к
	шаблону index.html')


























